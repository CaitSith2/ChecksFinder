<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tiles</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>revealed = false
type = "none"
marked = false
typeplus = ""
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.canclick == true &amp;&amp; global.clicked == true &amp;&amp; revealed == false)
{
    marked = !marked
    audio_play_sound(snd_digright,0,false)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.canclick == true &amp;&amp; revealed == false &amp;&amp; marked == false)
{
    revealed = true
    with instance_create(x+8,y+8,obj_piece)
    {
        image_index = 0
    }
    with instance_create(x+8,y+8,obj_piece)
    {
        image_index = 0
    }
    with instance_create(x+8,y+8,obj_piece)
    {
        image_index = 0
    }
    with instance_create(x+8,y+8,obj_piece)
    {
        image_index = 1
    }
    if (global.clicked == false)
    {
        global.clicked = true
        scr_generateroom(x, y)
    }
    if (type == "check")
    {
        global.spotlist[typeplus] = 1
        scr_senditem(typeplus+81000)
        global.checksgotten++
        audio_play_sound(snd_digright,0,false)
    }
    else if (type == "bomb")
    {
        with(obj_tile)
        {
            revealed = true
        }
        global.canclick = false
        alarm[0] = 30
        audio_play_sound(snd_explosion,0,false)
    }
    else
    {
        if (type == "none" &amp;&amp; scr_returnamtneartype("bomb") == 0)
        {
            scr_uncoversurrounding()
        }
        audio_play_sound(snd_digright,0,false)
    }
}
else if (global.canclick == true &amp;&amp; revealed == true)
{
    var flags = 0
    var bombs = 0
    with (instance_position(x,y-16,obj_tile))
    {
        if (marked == true)
        {
            flags++
        }
        else if (type == "bomb")
        {
            bombs++
        }
    }
    with (instance_position(x,y+16,obj_tile))
    {
        if (marked == true)
        {
            flags++
        }
        else if (type == "bomb")
        {
            bombs++
        }
    }
    with (instance_position(x-16,y,obj_tile))
    {
        if (marked == true)
        {
            flags++
        }
        else if (type == "bomb")
        {
            bombs++
        }
    }
    with (instance_position(x+16,y,obj_tile))
    {
        if (marked == true)
        {
            flags++
        }
        else if (type == "bomb")
        {
            bombs++
        }
    }
    with (instance_position(x-16,y-16,obj_tile))
    {
        if (marked == true)
        {
            flags++
        }
        else if (type == "bomb")
        {
            bombs++
        }
    }
    with (instance_position(x-16,y+16,obj_tile))
    {
        if (marked == true)
        {
            flags++
        }
        else if (type == "bomb")
        {
            bombs++
        }
    }
    with (instance_position(x+16,y-16,obj_tile))
    {
        if (marked == true)
        {
            flags++
        }
        else if (type == "bomb")
        {
            bombs++
        }
    }
    with (instance_position(x+16,y+16,obj_tile))
    {
        if (marked == true)
        {
            flags++
        }
        else if (type == "bomb")
        {
            bombs++
        }
    }
    if (flags == scr_returnamtneartype("bomb"))
    {
        if (bombs &gt; 0)
        {
            with(obj_tile)
            {
                revealed = true
            }
            global.canclick = false
            alarm[0] = 30
            audio_play_sound(snd_explosion,0,false)
        }
        else
        {
            scr_uncoversurrounding()
            audio_play_sound(snd_digright,0,false)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (revealed == true)
{
    draw_sprite(spr_tiles,1,x,y)
    if (type == "none" || type == "check")
    {
        if (scr_returnamtneartype("bomb") &gt; 0)
        {
            draw_sprite_ext(spr_tilenumbers,scr_returnamtneartype("bomb"),x,y,0.5,0.5,0,c_red,1)
        }
        if (scr_returnamtneartype("check") &gt; 0)
        {
            draw_sprite_ext(spr_tilenumbers,scr_returnamtneartype("check"),x+8,y,0.5,0.5,0,c_green,1)
        }
    }
    if (type == "check")
    {
        draw_sprite_ext(spr_tiles,3,x,y+8,0.5,0.5,0,c_white,1)
    }
    else if (type == "bomb")
    {
        draw_sprite(spr_tiles,2,x,y)
    }
}
else
{
    draw_sprite(spr_tiles,0,x,y)
    if (marked == true)
    {
        draw_sprite(spr_xmark,0,x,y)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
